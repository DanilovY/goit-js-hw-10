{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["// Описан в документации\nimport flatpickr from 'flatpickr';\n// Дополнительный импорт стилей\nimport 'flatpickr/dist/flatpickr.min.css';\n// Описанный в документации\nimport iziToast from 'izitoast';\n// Дополнительный импорт стилей\nimport 'izitoast/dist/css/iziToast.min.css';\n\niziToast.settings({\n  position: 'topRight',\n});\n\nconst datetimePicker = document.querySelector('#datetime-picker');\nconst btn = document.querySelector('button[data-start]');\nconst dataDays = document.querySelector('span[data-days]');\nconst dataHours = document.querySelector('span[data-hours]');\nconst dataMinutes = document.querySelector('span[data-minutes]');\nconst dataSeconds = document.querySelector('span[data-seconds]');\nlet userSelectedDate = '';\n\nbtn.disabled = true;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    if (selectedDates[0] > Date.now()) {\n      btn.disabled = false;\n      userSelectedDate = selectedDates[0] - Date.now();\n    } else {\n      btn.disabled = true;\n      iziToast.error({ message: 'Please choose a date in the future' });\n    }\n  },\n};\n\nflatpickr(datetimePicker, options);\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nbtn.addEventListener('click', addLeadingZero);\nfunction addLeadingZero(value) {\n  datetimePicker.disabled = true;\n  btn.disabled = true;\n  const interval = setInterval(() => {\n    if (userSelectedDate > 1000) {\n      userSelectedDate -= 1000;\n      const { days, hours, minutes, seconds } = convertMs(userSelectedDate);\n      dataDays.textContent = `${days}`.padStart(2, '0');\n      dataHours.textContent = `${hours}`.padStart(2, '0');\n      dataMinutes.textContent = `${minutes}`.padStart(2, '0');\n      dataSeconds.textContent = `${seconds}`.padStart(2, '0');\n    } else {\n      clearInterval(interval);\n      datetimePicker.disabled = false;\n    }\n  }, 1000);\n}\n"],"names":["iziToast","datetimePicker","btn","dataDays","dataHours","dataMinutes","dataSeconds","userSelectedDate","options","selectedDates","flatpickr","convertMs","ms","days","hours","minutes","seconds","addLeadingZero","value","interval"],"mappings":"+IASAA,EAAS,SAAS,CAChB,SAAU,UACZ,CAAC,EAED,MAAMC,EAAiB,SAAS,cAAc,kBAAkB,EAC1DC,EAAM,SAAS,cAAc,oBAAoB,EACjDC,EAAW,SAAS,cAAc,iBAAiB,EACnDC,EAAY,SAAS,cAAc,kBAAkB,EACrDC,EAAc,SAAS,cAAc,oBAAoB,EACzDC,EAAc,SAAS,cAAc,oBAAoB,EAC/D,IAAIC,EAAmB,GAEvBL,EAAI,SAAW,GAEf,MAAMM,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACjBA,EAAc,CAAC,EAAI,KAAK,IAAG,GAC7BP,EAAI,SAAW,GACfK,EAAmBE,EAAc,CAAC,EAAI,KAAK,IAAG,IAE9CP,EAAI,SAAW,GACfF,EAAS,MAAM,CAAE,QAAS,oCAAsC,CAAA,EAEnE,CACH,EAEAU,EAAUT,EAAgBO,CAAO,EAEjC,SAASG,EAAUC,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEAd,EAAI,iBAAiB,QAASe,CAAc,EAC5C,SAASA,EAAeC,EAAO,CAC7BjB,EAAe,SAAW,GAC1BC,EAAI,SAAW,GACf,MAAMiB,EAAW,YAAY,IAAM,CACjC,GAAIZ,EAAmB,IAAM,CAC3BA,GAAoB,IACpB,KAAM,CAAE,KAAAM,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYL,EAAUJ,CAAgB,EACpEJ,EAAS,YAAc,GAAGU,CAAI,GAAG,SAAS,EAAG,GAAG,EAChDT,EAAU,YAAc,GAAGU,CAAK,GAAG,SAAS,EAAG,GAAG,EAClDT,EAAY,YAAc,GAAGU,CAAO,GAAG,SAAS,EAAG,GAAG,EACtDT,EAAY,YAAc,GAAGU,CAAO,GAAG,SAAS,EAAG,GAAG,CAC5D,MACM,cAAcG,CAAQ,EACtBlB,EAAe,SAAW,EAE7B,EAAE,GAAI,CACT"}